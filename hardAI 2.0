// Function to evaluate the board state
int evaluateBoard(const std::vector<std::vector<int>>& board, bool isPlayerX) {
    int size = board.size(); // Determine the size of the board (should be 3 for Tic-Tac-Toe)
   
    // Check rows for a win
    for (int i = 0; i < size; i++) {
        if (board[i][0] == board[i][1] && board[i][1] == board[i][size - 1]) { // Check if all cells in the row are the same and not empty
            if (board[i][0] == (isPlayerX ? 1 : 2)) return 10; // If it's a win for the player, return +10
            else if (board[i][0] == (isPlayerX ? 2 : 1)) return -10; // If it's a win for the opponent, return -10
        }
       
        // Check columns for a win
        if (board[0][i] == board[1][i] && board[1][i] == board[size - 1][i]) { // Check if all cells in the column are the same and not empty
            if (board[0][i] == (isPlayerX ? 1 : 2)) return 10; // If it's a win for the player, return +10
            else if (board[0][i] == (isPlayerX ? 2 : 1)) return -10; // If it's a win for the opponent, return -10
        }
    }
   
    // Check diagonals for a win
    if (board[0][0] == board[1][1] && board[1][1] == board[size - 1][size - 1]) { // Check main diagonal
        if (board[0][0] == (isPlayerX ? 1 : 2)) return 10; // If it's a win for the player, return +10
        else if (board[0][0] == (isPlayerX ? 2 : 1)) return -10; // If it's a win for the opponent, return -10
    }
   
    if (board[size - 1][0] == board[1][1] && board[1][1] == board[0][size - 1]) { // Check anti-diagonal
        if (board[size - 1][0] == (isPlayerX ? 1 : 2)) return 10; // If it's a win for the player, return +10
        else if (board[size - 1][0] == (isPlayerX ? 2 : 1)) return -10; // If it's a win for the opponent, return -10
    }
   
    return 0; // If no winner is found, return a neutral score of 0
}

// Function to generate the game tree
void generateGameTree(GameStateNode* node, int depth, bool maximizingPlayer) {
    if (depth == 0 || gameOver) { // Base case: stop if depth is 0 or game is over
        return;
    }
   
    int size = node->board.size(); // Determine the size of the board
   
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size; ++j) {
            if (node->board[i][j] == 0) { // If the cell is empty
                std::vector<std::vector<int>> newBoard = node->board;
                newBoard[i][j] = maximizingPlayer ? 2 : 1; // Assigns the player's number to the board
               
                GameStateNode* child = new GameStateNode(newBoard); // Create a new game state node
                node->children.push_back(child); // Add the child node to the current node's children
                generateGameTree(child, depth - 1, !maximizingPlayer); // Recursively generate the tree for the child node
            }
        }
    }
}

// Minimax function
int minimax(GameStateNode* node, int depth, bool playerTurn) {
    // Base case: check for terminal states (game over or depth limit reached)
    if (depth == 0 || gameOver) {
        return evaluateBoard(node->board, playerTurn); // Evaluate the board and return the score
    }
   
    if (playerTurn) {
        int best = -1000; // Initialize the best score for maximizing player
        for (auto child : node->children) {
            best = std::max(best, minimax(child, depth - 1, false)); // Recursively call minimax for each child
        }
        return best; // Return the best score found
    } else {
        int best = 1000; // Initialize the best score for minimizing player
        for (auto child : node->children) {
            best = std::min(best, minimax(child, depth - 1, true)); // Recursively call minimax for each child
        }
        return best; // Return the best score found
    }
}

// Minimax with alpha-beta pruning
int minimaxAlphaBeta(GameStateNode* node, int depth, bool playerTurn, int alpha, int beta) {
    // Base case: check for terminal states (game over or depth limit reached)
    if (depth == 0 || gameOver) {
        return evaluateBoard(node->board, playerTurn); // Evaluate the board and return the score
    }
   
    if (playerTurn) {
        int best = -1000; // Initialize the best score for maximizing player
        for (auto child : node->children) {
            best = std::max(best, minimaxAlphaBeta(child, depth - 1, false, alpha, beta)); // Recursively call minimax with alpha-beta pruning
            alpha = std::max(alpha, best); // Update alpha
           
            if (beta <= alpha) {
                break; // Beta cut-off: stop exploring further if beta is less than or equal to alpha
            }
        }
        return best; // Return the best score found
    } else {
        int best = 1000; // Initialize the best score for minimizing player
        for (auto child : node->children) {
            best = std::min(best, minimaxAlphaBeta(child, depth - 1, true, alpha, beta)); // Recursively call minimax with alpha-beta pruning
            beta = std::min(beta, best); // Update beta
           
            if (beta <= alpha) {
                break; // Alpha cut-off: stop exploring further if beta is less than or equal to alpha
            }
        }
        return best; // Return the best score found
    }
}

// Function for the AI move using minimax with alpha-beta pruning
void hardAI() {
    if (!playerX && !gameOver) { // Only proceed if it's not Player X's turn and the game is not over
        GameStateNode* rootNode = new GameStateNode(board); // Create a root node with the current board state
       
        generateGameTree(rootNode, 3, true); // Generate the game tree up to depth 3
       
        int bestScore = -1000; // Initialize the best score for the AI
        std::pair<int, int> bestMove; // Variable to store the best move
       
        for(auto child : rootNode->children) {
            int score = minimaxAlphaBeta(child, 2, false, -1000, 1000); // Evaluate each child using alpha-beta pruning
            if(score > bestScore) { // If a better score is found
                bestScore = score; // Update the best score
               
                // Find the position of the best move by comparing the child board with the current board
                for(int i = 0; i < 3; ++i) {
                    for(int j = 0; j < 3; ++j) {
                        if(child->board[i][j] != board[i][j]) { // Identify the cell that differs
                            bestMove = {i, j}; // Set the best move
                            break;
                        }
                    }
                }
            }
        }
       
        board[bestMove.first][bestMove.second] = 2; // AI makes its move by placing 'O' in the best position
       
        if (checkWin(board, 2)) { // Check if AI has won
            setWinner(2); // Announce AI as the winner
            gameOver = true; // Set the game over flag
        } else if (isBoardFull(board)) { // Check if the board is full
            std::cout << "It's a draw!" << std::endl; // Announce a draw
            gameOver = true; // Set the game over flag
        }
       
        // Cleanup memory allocated for the game tree nodes
        for(auto child : rootNode->children) {
            delete child; // Delete each child node
        }
        delete rootNode; // Delete the root node
    }
}

// Function to check if the game is over
bool checkWin(const std::vector<std::vector<int>>& board, int player) {
    int size = board.size();
   
    for (int i = 0; i < size; ++i) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player) return true;
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player) return true;
    }
   
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) return true;
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) return true;
   
    return false;
}

// Function to check if the board is full
bool isBoardFull(const std::vector<std::vector<int>>& board) {
    for (const auto& row : board) {
        for (int cell : row) {
            if (cell == 0) return false;
        }
    }
    return true;
}
